#+STARTUP: show2levels
* Emacs Initialization
** Packages Sources
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
#+END_SRC
** use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package delight :ensure t)
  (use-package use-package-ensure-system-package :ensure t)
#+end_src
** straight
#+begin_src emacs-lisp
  ;;straight
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq package-enable-at-startup nil)

  (straight-use-package 'use-package)
#+end_src
** dufuns
#+begin_src emacs-lisp
  ;; Functions (load all files in defuns-dir)
  (use-package s :ensure t)
  (use-package dash :ensure t)

  (setq defuns-dir (expand-file-name "defuns" user-emacs-directory))
  (dolist (file (directory-files defuns-dir t "\\w+"))
    (when (file-regular-p file)
      (load file)))
#+end_src
** shell
#+begin_src emacs-lisp
  ;;shell path
  (use-package exec-path-from-shell
    :defer 1
    :config
    (when (memq window-system '(mac ns x))
      (setq exec-path-from-shell-check-startup-files nil)
      (setq exec-path-from-shell-arguments nil)
      (dolist (envvar '("JAVA_HOME" "DOTNET_ROOT"))
        (add-to-list 'exec-path-from-shell-variables envvar))
      (exec-path-from-shell-initialize)
      ))
#+end_src
* Start Up
** Better defaults
#+begin_src emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                                ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                              ; Hide the cursor in inactive windows
   display-time-default-load-average nil                         ; Don't display load average
   fill-column 80                                                ; Set width for automatic line breaks
   help-window-select t                                          ; Focus new help windows when opened
   indent-tabs-mode nil                                          ; Prefers spaces over tabs
   inhibit-startup-screen t                                      ; Disable start-up screen
   initial-scratch-message ""                                    ; Empty the initial *scratch* buffer
   kill-ring-max 128                                             ; Maximum length of kill ring
   load-prefer-newer t                                           ; Prefers the newest version of a file
   mark-ring-max 128                                             ; Maximum length of mark ring
   scroll-conservatively most-positive-fixnum                    ; Always scroll by one line
   select-enable-clipboard t                                     ; Merge system's and Emacs' clipboard
   tab-width 2                                                   ; Set width for tabs
   use-package-always-ensure t                                   ; Avoid the :ensure keyword for each package
   vc-follow-symlinks t                                          ; Always follow the symlinks
   view-read-only t)                                             ; Always open read-only buffers in view-mode

  (cd "~/")                                                      ; Move to the user directory
  (column-number-mode 1)                                         ; Show the column number
  (display-time-mode nil)                                        ; Enable time in the mode-line
  (fset 'yes-or-no-p 'y-or-n-p)                                  ; Replace yes/no prompts with y/n
  (global-hl-line-mode)                                          ; Hightlight current line
  (set-default-coding-systems 'utf-8)                            ; Default to utf-8 encoding
  (show-paren-mode 1)                                            ; Show the parent
  (setq-default cursor-type 'bar)                                ; set cursor style
  (blink-cursor-mode t)                                          ; blink cursor
  (add-hook 'before-save-hook 'delete-trailing-whitespace)       ; delete traniling whitespace
  (add-to-list 'default-frame-alist '(fullscreen . maximized))   ; full screen
  ;; (global-visual-line-mode t)
  (setq-default truncate-lines t)

  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  ;; (setenv "LSP_USE_PLISTS" "true")

  (when (memq window-system '(mac ns))
    (add-to-list 'default-frame-alist '(ns-appearance . 'dark))
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (setq ns-use-proxy-icon nil)
    (setq frame-title-format nil))

  ;; set transparency
  (set-frame-parameter (selected-frame) 'alpha '(95 95))
  (add-to-list 'default-frame-alist '(alpha 95 95))

  (setq warning-minimum-level :emergency)

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory ".backups")))))
  (setq backup-by-copying t)
  ;;(setq make-backup-files nil)
  (setq create-lockfiles nil)

  (setq custom-file "~/.emacs.d/custom-variables.el")
  (when (file-exists-p custom-file)
    (load custom-file))


  (when window-system
    (menu-bar-mode -1)              ; Disable the menu bar
    (scroll-bar-mode -1)            ; Disable the scroll bar
    (tool-bar-mode -1)              ; Disable the tool bar
    (tooltip-mode -1))              ; Disable the tooltips

  ;; Move to trash when deleting stuff
  (setq delete-by-moving-to-trash t
        trash-directory "~/.Trash/emacs")

  ;; ediff setup
  (setq ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; https://github.com/manateelazycat/company-english-helper
  ;; toggle-company-english-helper
  ;; (add-to-list 'load-path (expand-file-name "~/.emacs.d/elpa/company-english-helper"))
  ;; (require 'company-english-helper)

  ;; create dir
  (defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
    "Create parent directory if not exists while visiting file."
    (unless (file-exists-p filename)
      (let ((dir (file-name-directory filename)))
        (unless (file-exists-p dir)
          (make-directory dir t)))))
#+end_src
** Theme
#+begin_src emacs-lisp
  ;; -------------------------------------------------------------------------------------------------------
  ;; (use-package doom-themes
  ;;   :config
  ;;   (setq doom-themes-enable-bold nil)
  ;;   (setq doom-themes-enable-italic nil)

  ;;   (load-theme 'doom-solarized-dark t)
  ;;   ;; (load-theme 'doom-solarized-light t)
  ;;   ;; (load-theme 'doom-nord-light)
  ;;   ;; (load-theme 'doom-dracula t)

  ;;   (doom-themes-neotree-config)
  ;;   (doom-themes-org-config)
  ;;   )

  ;; (use-package doom-modeline
  ;;   :defer 0.1
  ;;   :config (doom-modeline-mode))

  ;; (use-package fancy-battery
  ;;   :after doom-modeline
  ;;   :hook (after-init . fancy-battery-mode))

  ;; (use-package solaire-mode
  ;;   :custom (solaire-mode-remap-fringe t)
  ;;   :config
  ;;   ;;(solaire-mode-swap-bg)
  ;;   (solaire-global-mode +1))

  (use-package solarized-theme
    :ensure t
    :config
    ;; make the fringe stand out from the background
    ;; (setq solarized-distinct-fringe-background t)

    ;; Don't change the font for some headings and titles
    (setq solarized-use-variable-pitch nil)

    ;; make the modeline high contrast
    (setq solarized-high-contrast-mode-line t)

    ;; Use less bolding
    (setq solarized-use-less-bold t)

    ;; Use more italics
    (setq solarized-use-more-italic t)

    ;; Use less colors for indicators such as git:gutter, flycheck and similar
    (setq solarized-emphasize-indicators nil)

    ;; Don't change size of org-mode headlines (but keep other size-changes)
    (setq solarized-scale-org-headlines nil)
    (setq solarized-scale-outline-headlines nil)

    (setq x-underline-at-descent-line t)

    (setq solarized-height-minus-1 1.2)
    (setq solarized-height-plus-1 1.2)
    (setq solarized-height-plus-2 1.2)
    (setq solarized-height-plus-3 1.2)
    (setq solarized-height-plus-4 1.2)

    (load-theme 'solarized-dark)
    (set-face-attribute 'cursor nil :inverse-video nil))

  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (spaceline-spacemacs-theme)

    (set-face-attribute 'mode-line nil
                        :box nil
                        :overline nil
                        :underline nil)

    (set-face-attribute 'mode-line-inactive nil
                        :box nil
                        :overline nil
                        :underline nil)

    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(markdown-code-face ((t (:inherit consolas))))
     '(company-tooltip-selection
       ((t (:background "#002b36" :foreground "#b58900" :weight normal))))
     '(magit-diff-context-highlight ((t (:extend t :background "#073642" :foreground "grey70"))))
     '(magit-section-highlight ((t (:extend t :background "#073642"))))
     '(mode-line ((t (:background "#657b83" :foreground "#002b36" :box nil :overline nil :underline nil))))
     '(powerline-active1 ((t (:inherit mode-line :background "#586e75" :foreground "#002b36"))))
     '(powerline-active2 ((t (:inherit mode-line :background "#586e75" :foreground "#002b36"))))
     '(mode-line-inactive
       ((t (:inherit mode-line :background "#073642" :foreground "#839496" :box nil :overline nil :underline nil :weight light))))
     '(powerline-inactive1 ((t (:inherit mode-line-inactive :background "#073642"))))
     '(powerline-inactive2 ((t (:inherit mode-line-inactive :background "#586e75"))))
     '(spaceline-highlight-face ((t (:background "#859900" :foreground "#3E3D31" :inherit 'mode-line)))))
    )

  (use-package spaceline-all-the-icons
    :after spaceline
    :config
    (spaceline-all-the-icons-theme)

    (spaceline-toggle-all-the-icons-bookmark-on)
    ;; (spaceline-toggle-all-the-icons-eyebrowse-workspace-on)
    ;; (spaceline-toggle-all-the-icons-window-number-on)

    (spaceline-all-the-icons-theme
     'persp-segment-symbol
     '(:eval (propertize (format-time-string "%M"))) 'etc)

    ;; 'slant, 'arrow, 'cup, 'wave, 'none
    (setq spaceline-all-the-icons-separator-type 'wave)
    (setq spaceline-all-the-icons-slim-render t))

  ;; org block code style
  (custom-set-faces
   '(org-block-begin-line
     ((t (:underline nil))))
   ;; '(org-block
   ;;   ((t (:background "#073642"))))
   '(org-block-end-line
     ((t (:overline nil))))
   )
#+end_src
** font
#+begin_src emacs-lisp
  ;; (set-face-attribute 'default nil :font "Operator Mono 16")
  ;; (set-face-attribute 'default nil :font "-*-Operator Mono-normal-italic-normal-*-16-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-*-Operator Mono-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")

  ;; (set-face-attribute 'default nil :font "-apple-Monaco-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-apple-Menlo-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-apple-inconsolata-medium-r-normal--14-*-*-*-*-*-iso10646-1")

  ;; (set-face-attribute 'default nil :font "-*-Inconsolata Awesome-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-*-Hack-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1")
  (set-face-attribute 'default nil :font "-outline-Consolas-normal-normal-normal-*-17-*-*-*-m-0-iso10646-1")

  ;; (set-face-attribute 'default nil :font "JetBrains Mono 16")

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-table ((t (:foreground "#859900" :family "Ubuntu Mono")))))
#+end_src
** proxy
#+begin_src emacs-lisp
  ;; (setq url-proxy-services
  ;;       '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
  ;;         ("http" . "localhost:1087")
  ;;         ("https" . "localhost:1087")))
#+end_src
** keyboard
#+begin_src emacs-lisp
  ;; split window
  (global-set-key (kbd "C-x 2") (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key (kbd "C-x 3") (lambda () (interactive)(split-window-horizontally) (other-window 1)))

  ;; comment or uncomment
  (global-set-key (kbd "C-c /") 'comment-or-uncomment-region)
  (global-set-key (kbd "s-/") 'comment-line)

  ;; Duplicate region
  (global-set-key (kbd "C-c d") 'duplicate-current-line-or-region)

  ;; Perform general cleanup.
  (global-set-key (kbd "C-c n") 'cleanup-buffer)

  (defun my/select-current-line-and-forward-line (arg)
    "Select the current line and move the cursor by ARG lines IF
  no region is selected.

  If a region is already selected when calling this command, only move
  the cursor by ARG lines."
    (interactive "p")
    (when (not (use-region-p))
      (forward-line 0)
      (set-mark-command nil))
    (forward-line arg))
  ;; Note that I would not recommend binding this command to `C-S-SPC'.
  ;; From my personal experience, the default binding to `C-S-SPC' to
  ;; `recenter-top-bottom' is very useful.
  (global-set-key (kbd "C-S-SPC") #'my/select-current-line-and-forward-line)

  ;;org
  (defun my-org-hook ()
    ;; (define-key org-mode-map (kbd "<C-o>") 'org-open-line)
    (define-key org-mode-map (kbd "<C-return>") 'org-insert-heading-respect-content)
    (define-key org-mode-map (kbd "<C-S-return>") 'org-insert-todo-heading-respect-content)
    (define-key org-mode-map (kbd "<M-return>") 'org-meta-return)
    (define-key org-mode-map (kbd "C-c /") 'org-sparse-tree)
    (define-key org-mode-map (kbd "C-c l") 'org-store-link)
    (define-key org-mode-map (kbd "C-c a") 'org-agenda)
    (define-key org-mode-map (kbd "C-c c") 'org-capture)
    )
  (add-hook 'org-mode-hook 'my-org-hook)

  (global-set-key (kbd "<S-return>") 'new-line-dwim)
  (global-set-key (kbd "<C-S-return>") 'open-line-above)
  (global-set-key (kbd "<C-return>") 'open-line-below)

  ;; Buffer file functions
  (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
  (global-set-key (kbd "C-x C-k") 'delete-current-buffer-file)

  (global-set-key (kbd "C-c b") 'create-scratch-buffer)

  ;; Killing text
  (global-set-key (kbd "C-S-k") 'kill-and-retry-line)
  (global-set-key (kbd "C-w") 'kill-region-or-backward-word)
  (global-set-key (kbd "C-S-w") 'kill-to-beginning-of-line)

  ;; Indentation help
  (global-set-key (kbd "M-j") (λ (join-line -1)))

  (global-set-key (kbd "C-c o") 'occur)

  ;; Make shell more convenient, and suspend-frame less
  ;; ansi-term
  ;; (global-set-key (kbd "C-z") (lambda ()(interactive)(ansi-term "/usr/local/bin/fish")))
  ;; (global-set-key (kbd "C-z") 'shell)
  ;; (global-set-key (kbd "C-x M-z") 'suspend-frame)

  ;; switch window selected
  (defun prev-window ()
    (interactive)
    (other-window -1))
  (global-set-key (kbd "s-[") 'prev-window)
  (global-set-key (kbd "s-]") 'other-window)

  ;; switch buffer selected
  (defun my-change-buffer (change-buffer)
    "Call CHANGE-BUFFER until current buffer is not in `my-skippable-buffers'."
    (let ((initial (current-buffer)))
      (funcall change-buffer)
      (let ((first-change (current-buffer)))
        (catch 'loop
          (while (not (string-match "\\`[^*]" (buffer-name)))
            (funcall change-buffer)
            (when (eq (current-buffer) first-change)
              (switch-to-buffer initial)
              (throw 'loop t)))))))

  (defun my-next-buffer ()
    "Variant of `next-buffer' that skips `my-skippable-buffers'."
    (interactive)
    (my-change-buffer 'next-buffer))

  (defun my-previous-buffer ()
    "Variant of `previous-buffer' that skips `my-skippable-buffers'."
    (interactive)
    (my-change-buffer 'previous-buffer))


  (global-set-key (kbd "s-p") 'my-previous-buffer)
  (global-set-key (kbd "s-n") 'my-next-buffer)

  (defun my-switch-to-buffer ()
    (interactive)
    (let ((completion-regexp-list '("\\`[^*]"
                                    "\\`\\([^T]\\|T\\($\\|[^A]\\|A\\($\\|[^G]\\|G\\($\\|[^S]\\|S.\\)\\)\\)\\).*")))
      (call-interactively 'persp-ivy-switch-buffer)))

  (global-set-key (kbd "C-u") 'my-switch-to-buffer)

  ;; move line up
  (defun move-line-up ()
    (interactive)
    (transpose-lines 1)
    (previous-line 2))

  ;; move line down
  (defun move-line-down ()
    (interactive)
    (next-line 1)
    (transpose-lines 1)
    (previous-line 1))

  (global-set-key (kbd "<C-S-down>") 'move-line-down)
  (global-set-key (kbd "<C-S-up>") 'move-line-up)

  ;; Move more quickly
  (global-set-key (kbd "C-S-n") (λ (ignore-errors (next-line 5))))
  (global-set-key (kbd "C-S-p") (λ (ignore-errors (previous-line 5))))
  (global-set-key (kbd "C-S-f") (λ (ignore-errors (forward-char 5))))
  (global-set-key (kbd "C-S-b") (λ (ignore-errors (backward-char 5))))

  ;; Translate the problematic keys to the function key Hyper,
  ;; then bind this to the desired ctrl-i behavior
  (keyboard-translate ?\C-i ?\H-i)
  ;; (global-set-key [?\H-i] 'projectile-find-file)
  (global-set-key [?\H-i] 'project-find-file)
#+end_src
* Advanced Configuration
** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
** dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :config
    (add-hook 'dired-mode-hook
              (lambda ()
                (define-key dired-mode-map (kbd "j") 'dired-up-directory)
                (define-key dired-mode-map (kbd "k") 'dired-find-file)))
    )

  ;; (use-package all-the-icons-dired
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :delight ivy-mode ""
    :bind (:map ivy-minibuffer-map
                ("C-h" . delete-backward-char)
                ("<return>" . ivy-alt-done))
    :config
    (setq recentf-filename-handlers '(abbreviate-file-name))
    (setq ivy-use-virtual-buffers nil)
    (setq enable-recursive-minibuffers t)
    ;; (setq ivy-height 10)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))

    (ivy-set-actions ;; M-o
     'counsel-find-file
     '(("d" delete-file "delete")
       ("r" rename-file "rename")
       ("x" counsel-find-file-as-root "open as root"))
     )

    (setq ivy-initial-inputs-alist
          '(;;(counsel-M-x . "^")
            (ivy-switch-buffer-other-window . "^")
            (counsel-describe-function . "^")
            (counsel-describe-variable . "^")
            (t . "")))

    :hook ((after-init . ivy-mode)
           (ivy-occur-mode . hl-line-mode)))
#+end_src
** ivy-avy
#+begin_src emacs-lisp
  (use-package ivy-avy
    ensure t)
#+end_src
** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-;" . avy-goto-char-timer)
           ("C-c j" . avy-resume))
    :config
    (defun avy-action-mark-to-char (pt)
      (activate-mark)
      (goto-char pt))


    (defun avy-action-kill-whole-line (pt)
      (save-excursion
        (goto-char pt)
        (kill-whole-line))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (defun avy-action-teleport-whole-line (pt)
      (avy-action-kill-whole-line pt)
      (save-excursion (yank)) t)

    (setf (alist-get ?M avy-dispatch-alist) 'avy-action-mark-to-char
          (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line
          (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)
    )
#+end_src
** ivy-posframe
#+begin_src emacs-lisp
  ;; (use-package ivy-posframe
  ;;   :ensure t
  ;;   :config
  ;;   (setq ivy-posframe-border-width 2)
  ;;   (setq ivy-posframe-parameters
  ;;         '((left-fringe . 8)
  ;;           (right-fringe . 8)
  ;;           (internal-border-width . 8)))

  ;;   (setq ivy-posframe-height-alist
  ;;         '((swiper . 15)
  ;;           (t . 10)))
  ;;   (setq ivy-posframe-width 100)
  ;;   (setq ivy-posframe-display-functions-alist
  ;;         '(;;(swiper . ivy-display-function-fallback)
  ;;           ;;(swiper-isearch . ivy-display-function-fallback)
  ;;           ;;(counsel-M-x . ivy-posframe-display-at-point)
  ;;           (t . ivy-posframe-display-at-frame-center)))

  ;;   :hook (after-init . ivy-posframe-mode))
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("\C-x \C-f" . counsel-find-file)
           ("s-f" . counsel-find-file)
           ("M-y" . counsel-yank-pop)
           ("C-o" . counsel-recentf)
           ("C-x b" . persp-ivy-switch-buffer)
           ("C-x j" . counsel-rg)
           ("C-x C-b" . ibuffer-list-buffers))
    :init
    (setq counsel-find-file-ignore-regexp (regexp-opt '(".git" ".DS_Store")))
    (setq recentf-max-saved-items 200))
#+end_src
** swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :after ivy
    :bind (("C-r" . swiper-thing-at-point)
           ("C-s" . swiper)
           :map swiper-map
           ("M-%" . swiper-query-replace)))
#+end_src
** amx
#+begin_src emacs-lisp
  (use-package amx
    :ensure t
    :after ivy
    :custom
    (amx-backend 'auto)
    (amx-save-file "~/.emacs.d/.amx-items")
    (amx-history-length 100)
    (amx-show-key-bindings nil)
    :config
    (amx-mode 1))
#+end_src
** undo
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (setq undo-tree-auto-save-history nil)
    (global-undo-tree-mode 1))
#+end_src
** wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :config
    (setq wgrep-auto-save-buffer t))
#+end_src
** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    (("C-=" . 'er/expand-region)
     ("C-+" . 'er/contract-region)
     ("C-@" . 'er/expand-region)
     ("C-M-@" . 'er/contract-region))
    :config
    (pending-delete-mode t)
    ;; (define-key input-decode-map [?\C-m] [C-m])
    ;; (global-set-key (kbd "<C-m>") #'er/expand-region)
    )
#+end_src
** change-inner
#+BEGIN_SRC emacs-lisp
  (use-package change-inner
    :ensure t
    :bind
    (("M-i" . 'change-inner))
    (("M-o" . 'change-outer))
    (("M-I" . 'copy-inner))
    (("M-O" . 'copy-outer))
    )
#+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp
  ;;
  ;; multiple cursors
  ;;
  (use-package multiple-cursors
    :ensure t
    :init
    (global-unset-key (kbd "M-<down-mouse-1>"))
    (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
    (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
    (global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)

    (global-set-key
     (kbd "C-c m")
     (defhydra hydra-mc (:columns 6 :color pink)
       "multiple-cursors"
       ("e" mc/mark-more-like-this-extended "extended")
       ("w" mc/mark-next-word-like-this "next-word")
       ("W" mc/mark-previous-word-like-this "previous-word")
       ("A" mc/mark-all-words-like-this "all-words")
       ("s" mc/mark-next-symbol-like-this "next-symbol")
       ("S" mc/mark-previous-symbol-like-this "previous-symbol")

       ("n" mc/mark-next-like-this "next")
       ("p" mc/mark-previous-like-this "previous")

       ("k" mc/skip-to-previous-like-this "skip-p")
       ("j" mc/skip-to-next-like-this "skip-n")

       ("u" mc/unmark-next-like-this "unmark-n")
       ("U" mc/unmark-previous-like-this "unmark-p")

       ("a" mc/mark-all-like-this "all")
       ("m" mc/mark-all-dwim "dwim")
       ("r" mc/mark-all-in-region-regexp "regexp")

       ("q" nil "Quit" :color blue)))
    )
#+END_SRC
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-buffer-name-format "*%x%M%v: %t%x")
    (global-set-key (kbd "C-x m") 'magit))

  (use-package forge :after magit)
#+end_src
** paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'clojure-mode-hook 'paredit-mode)
    (add-hook 'cider-repl-mode-hook 'paredit-mode)
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
    ;; Enable `paredit-mode' in the minibuffer, during `eval-expression'.
    ;; (defun conditionally-enable-paredit-mode
    ;;   (if (eq this-command 'eval-expression)
    ;;       (paredit-mode 1)))

    ;; (add-hook 'minibuffer-setup-hook 'conditionally-enable-paredit-mode)
    )
#+end_src
** smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :bind (:map smartparens-mode-map
                ("C-M-a" . sp-beginning-of-sexp)
                ("C-M-e" . sp-end-of-sexp)

                ("C-<down>" . sp-down-sexp)
                ("C-<up>"   . sp-up-sexp)
                ("M-<down>" . sp-backward-down-sexp)
                ("M-<up>"   . sp-backward-up-sexp)

                ("C-M-f" . sp-forward-sexp)
                ("C-M-b" . sp-backward-sexp)

                ("C-M-n" . sp-next-sexp)
                ("C-M-p" . sp-previous-sexp)

                ("C-M-t" . sp-transpose-sexp)
                ("C-M-k" . sp-kill-sexp)
                ("C-k"   . sp-kill-hybrid-sexp)
                ("M-k"   . sp-backward-kill-sexp))

    :init
    (smartparens-global-mode t)

    (add-hook 'clojure-mode-hook (lambda () (smartparens-mode -1)))
    (add-hook 'emacs-lisp-mode-hook (lambda () (smartparens-mode -1)))
    (add-hook 'cider-repl-mode-hook (lambda () (smartparens-mode -1))))
#+end_src
** prodigy
#+begin_src emacs-lisp
  (use-package prodigy
    :ensure t
    :bind (("C-c s" . prodigy))
    :config
    (prodigy-define-service
      :name "cloud-pro"
      :command "npm"
      :args '("run" "dev")
      :cwd "~/Workspace/cloud-pro")
    (prodigy-define-service
      :name "marketing-strategy"
      :command "npm"
      :args '("run" "dev")
      :cwd "~/Workspace/marketing-strategy")
    (prodigy-define-service
      :name "decision-engine"
      :command "npm"
      :args '("run" "dev")
      :cwd "~/Workspace/decision-engine")
    (prodigy-define-service
      :name "norm-center"
      :command "npm"
      :args '("run" "dev")
      :cwd "~/Workspace/norm-center")
    (prodigy-define-service
      :name "ladder-dataSource"
      :command "npm"
      :args '("run" "dev")
      :cwd "~/Workspace/ladder-dataSource")
    )
#+end_src
** guide-key
#+begin_src emacs-lisp
  (use-package guide-key
    :ensure t
    :config
    (guide-key-mode 1)
    (setq guide-key/idle-delay 0.5)
    ;; (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x v" "C-x 8" "C-x +" "C-c RET" "C-c" "C-x x"))
    (setq guide-key/recursive-key-sequence-flag t)
    (setq guide-key/popup-window-position 'bottom)
    )
#+end_src
** perspective
#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :config
    (customize-set-variable 'persp-mode-prefix-key (kbd "C-x x"))
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src
** translate
#+begin_src emacs-lisp
  (defun read-word ()
    (interactive)
    (let ((text (thing-at-point 'word)))
      (if text
          (shell-command (concat "say " (shell-quote-argument text)))
        )))

  (define-key global-map (kbd "C-c r") 'read-word)

  (use-package go-translate
    :ensure t
    :bind (("C-c t" . gts-do-translate))
    :config
    ;; (setq go-translate-token-current (cons 430675 2721866130))
    (setq gts-debug-p t)
    (setq gts-translate-list '(("en" "zh")))
    (setq gts-default-translator
          (gts-translator
           :picker (gts-noprompt-picker)
           :engines (gts-google-engine)
           :render (gts-buffer-render)))
    )

  (require 'insert-translated-name)
#+end_src
** beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :custom
    (beacon-color "yellow")
    :config
    (beacon-mode 1))
#+end_src
** diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src
** restclient
#+begin_src emacs-lisp
  (use-package restclient
    :ensure t
    :mode (("\\.http\\'" . restclient-mode))
    :config
    (setq restclient-log-request t))

  (use-package ob-restclient
    :init (cl-pushnew '(restclient . t) load-language-list))
#+end_src
** search-web
#+begin_src emacs-lisp
  (use-package search-web
    :defer t
    :ensure t
    :init
    (setq search-web-engines
          '(("Google" "http://www.google.com/search?q=%s" nil)
            ("Youtube" "http://www.youtube.com/results?search_query=%s" nil)
            ("Stackoveflow" "http://stackoverflow.com/search?q=%s" nil)
            ("MDN" "https://developer.mozilla.org/zh-CN/search?q=%s" nil)
            ("Github" "https://github.com/search?q=%s" nil)
            ("Melpa" "https://melpa.org/#/?q=%s" nil)
            ("Emacs-China" "https://emacs-china.org/search?q=%s" nil)
            ("EmacsWiki" "https://www.emacswiki.org/emacs/%s" nil)
            ("Wiki-zh" "https://zh.wikipedia.org/wiki/%s" nil)
            ("Wiki-en" "https://en.wikipedia.org/wiki/%s" nil)
            ))
    :bind (("C-c w u" . browse-url)
           ("C-c w w" . search-web)
           ("C-c w p" . search-web-at-point)
           ("C-c w r" . search-web-region)))
#+end_src
** origami
#+begin_src emacs-lisp
  (use-package origami
    :ensure t
    :hook (prog-mode . origami-mode)
    :bind (:map origami-mode-map
                ("<C-tab>" . origami-recursively-toggle-node)
                ("<S-tab>" . origami-toggle-all-nodes)))
#+end_src
** copilot
#+begin_src emacs-lisp
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :ensure t
    :config
    ;; (add-hook 'prog-mode-hook 'copilot-mode)
    (with-eval-after-load 'company
      ;; disable inline previews
      (delq 'company-preview-if-just-one-frontend company-frontends))


    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion))
#+end_src
* Languages
** company
#+begin_src emacs-lisp
  ;; (use-package company-tabnine
  ;;   :ensure t)

  ;; (use-package company-statistics
  ;;   :ensure t
  ;;   :hook (after-init . company-statistics-mode))

  (defun company-yasnippet/disable-after-dot (fun command &optional arg &rest _ignore)
    (if (eq command 'prefix)
        (let ((prefix (funcall fun 'prefix)))
          (when (and prefix (not
                             (eq
                              (char-before (- (point) (length prefix)))
                              ?.)))
            prefix))
      (funcall fun command arg)))

  (advice-add #'company-yasnippet :around #'company-yasnippet/disable-after-dot)

  (use-package company-restclient
    :ensure t)

  (defun setup-company-backends ()
    (setq company-backends
          '(company-files
            (company-yasnippet company-capf :with company-dabbrev-code :separate)
            (company-tide company-yasnippet :with company-dabbrev-code :separate)
            (company-restclient)
            (company-abbrev company-dabbrev))))

  (use-package company
    :ensure t
    :bind (:map company-active-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous)
                ("C-s" . company-filter-candidates)
                ("C-w" . kill-region-or-backward-word)
                :map company-search-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous))
    :hook (after-init . company-mode)
    :config
    (global-company-mode t)
    (setup-company-backends)
    ;;(setq company-dabbrev-other-buffers t)
    ;;(setq lsp-completion-provider :none)
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0
          company-show-numbers t
          company-tooltip-align-annotations t))
#+end_src
** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred)
    ;; :bind
    ;; (("M-'" . lsp-find-references)
    ;;  ("M-/" . lsp-find-implementation))
    :init
    (setq lsp-keymap-prefix "C-c l")
    ;; (add-hook 'lsp-completion-mode-hook
    ;;           (lambda ()
    ;;             (if (eq major-mode 'dart-mode)
    ;;               (setq company-minimum-prefix-length 0)
    ;;               (setq company-minimum-prefix-length 1))))
    :config
    ;;(setq lsp-log-io t)

    (setq lsp-enable-snippet nil)
    (setq lsp-completion-provider :none)
    (setq lsp-semgrep-metrics-enabled nil)

    (setq +format-with-lsp nil)
    (setq lsp-before-save-edits nil) ;; not auto remove do not use variable

    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-completion-enable-additional-text-edit nil)
    (setq lsp-eldoc-enable-hover nil)
    (setq lsp-modeline-diagnostics-enable nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-signature-auto-activate nil))

  (use-package lsp-ui :ensure t
    :custom
    ;; lsp-ui-doc
    (lsp-ui-doc-enable nil)
    ;; (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'top) ;; top, bottom, or at-point
    (lsp-ui-doc-max-width 150)
    (lsp-ui-doc-max-height 30)
    ;; (lsp-ui-doc-use-childframe t)
    ;; (lsp-ui-doc-use-webkit t)
    (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-doc-show-with-mouse nil)
    ;; lsp-ui-flycheck
    (lsp-ui-flycheck-enable nil)
    ;; lsp-ui-sideline
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-symbol t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-diagnostics nil)
    (lsp-ui-sideline-show-code-actions nil)
    ;; lsp-ui-imenu
    (lsp-ui-imenu-enable nil)
    (lsp-ui-imenu-kind-position 'top)
    ;; lsp-ui-peek
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-peek-height 20)
    (lsp-ui-peek-list-width 50)
    (lsp-ui-peek-fontify 'on-demand) ;; never, on-demand, or always
    :preface
    (defun ladicle/toggle-lsp-ui-doc ()
      (interactive)
      (if lsp-ui-doc-mode
          (progn
            (lsp-ui-doc-mode -1)
            (lsp-ui-doc--hide-frame))
        (lsp-ui-doc-mode 1)))
    :bind
    (:map lsp-mode-map
          ("s-." . lsp-ui-peek-find-references)
          ("M-." . lsp-ui-peek-find-definitions)
          ("M-/" . lsp-ui-peek-find-implementation)
          ;; ("C-c m"   . lsp-ui-imenu)
          ;; ("C-c s"   . lsp-ui-sideline-mode)
          ("s-d"   . ladicle/toggle-lsp-ui-doc)
          )
    :after lsp-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
  (use-package dap-java :ensure nil)
  (use-package dap-go :ensure nil)
  (use-package lsp-treemacs)

  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))
#+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    ;; (global-flycheck-mode t)
    )
#+end_src
** yasnippet-snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :hook ((lsp-mode . yas-minor-mode)
           (rjsx-mode . yas-minor-mode))
    :config
    (yas-reload-all))
#+END_SRC
** groovy
#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t
    :defer t
    :hook (groovy-mode . lsp))
#+end_src
** gradle
#+begin_src emacs-lisp
  (use-package gradle-mode
    :ensure t
    :defer t
    :bind (("C-c g b" . gradle-build)
           ("C-c g t" . gradle-test)
           ("C-c g s" . gradle-single-test)
           ("C-c g j" . gradle-build--daemon)
           ("C-c g k" . gradle-test--daemon)
           ("C-c g l" . gradle-single-test--daemon)
           ("C-c g d" . gradle-execute--daemon)
           ("C-c g e" . gradle-execute))
    :config
    (gradle-mode 1)
    )
#+end_src
** sql
#+begin_src emacs-lisp
  (use-package sql-indent
    :after (:any sql sql-interactive-mode)
    :delight sql-mode "Σ ")
#+end_src
** protobuf
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :ensure t)
#+end_src
** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :hook (yaml-mode . lsp)
    :mode "\\.yml\\'")
#+end_src
** Json
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :delight "J "
    :mode "\\.json\\'"
    :hook (before-save . my/json-mode-before-save-hook)
    :preface
    (defun my/json-mode-before-save-hook ()
      (when (eq major-mode 'json-mode)
        (json-pretty-print-buffer)))

    (defun my/json-array-of-numbers-on-one-line (encode array)
      "Prints the arrays of numbers in one line."
      (let* ((json-encoding-pretty-print
              (and json-encoding-pretty-print
                   (not (loop for x across array always (numberp x)))))
             (json-encoding-separator (if json-encoding-pretty-print "," ", ")))
        (funcall encode array)))
    :config
    (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line)
    (add-hook 'json-mode-hook
              (lambda ()
                (make-local-variable 'js-indent-level)
                (setq js-indent-level 2))))
#+end_src
** dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :hook (dockerfile-mode . lsp))
#+end_src
** clojure
#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.cljs$" . clojurescript-mode))
    (add-to-list 'auto-mode-alist '("\\.cljc$" . clojurec-mode)))
#+end_src
** clj-refactor
#+begin_src emacs-lisp
  (use-package clj-refactor
    :ensure t
    :config
    (defun my-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1) ; for adding require/use/import statements
      ;; This choice of keybinding leaves cider-macroexpand-1 unbound
      (cljr-add-keybindings-with-prefix "C-c C-m"))

    (add-hook 'clojure-mode-hook #'my-clojure-mode-hook))
#+end_src
** python
#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . lsp-deferred))

  (use-package pyvenv
    :diminish
    :config
    (setq pyvenv-mode-line-indicator
          '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
    (pyvenv-mode +1))
#+end_src
** java
#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :defer t
    :hook ((java-mode . lsp)
           (java-mode . gradle-mode))
    :config
    (setq lsp-java-save-actions-organize-imports t)
    ;; java1.8
    (setq lsp-java-jdt-download-url  "https://download.eclipse.org/jdtls/milestones/0.57.0/jdt-language-server-0.57.0-202006172108.tar.gz")

    (setq lombok-path (substitute-in-file-name "$HOME/.m2/repository/org/projectlombok/lombok/1.18.22/lombok-1.18.22.jar"))

    (setq lsp-java-vmargs
          (list "-noverify"
                "-Xmx1G"
                "-XX:+UseG1GC"
                "-XX:+UseStringDeduplication"
                (concat "-javaagent:" lombok-path)
                (concat "-Xbootclasspath/a:" lombok-path)))


    ;; (require 'lsp-java-boot)

    ;; to enable the lenses
    ;; (add-hook 'lsp-mode-hook #'lsp-lens-mode)
    ;; (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
    )
#+end_src
** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :mode (("\\.go\\'" . go-mode))
    :hook ((go-mode . lsp-deferred)
           (before-save . gofmt-before-save)
           (before-save . lsp-organize-imports)))
#+end_src
** rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :hook ((rust-mode . lsp-deferred)
           (before-save . my/rust-mode-before-save-hook))
    :bind (("C-c C-c" . rust-run)
           (:map rust-mode-map
                 ("M-<return>" . open-line-below-semicolon)))
    :preface
    (defun my/rust-mode-before-save-hook ()
      (when (eq major-mode 'rust-mode)
        (rust-format-buffer)))
    :config
    (require 'smartparens-rust))

  (use-package flycheck-rust
    :ensure t
    :config
    (with-eval-after-load 'rust-mode
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+end_src
** csharp
#+begin_src emacs-lisp
  (use-package csharp-mode
    :hook ((csharp-mode . flycheck-mode))
    :ensure t)

  (use-package omnisharp
    :ensure t
    :hook ((csharp-mode . lsp-deferred)
           (csharp-mode . omnisharp-mode)
           (before-save . my/csharp-mode-before-save-hook))
    :bind (("M-." . omnisharp-go-to-definition)
           ("s-." . omnisharp-find-usages))
    :preface
    (defun my/csharp-mode-before-save-hook ()
      (when (eq major-mode 'csharp-mode)
        (omnisharp-code-format-entire-file)))
    :config
    ;; (setq omnisharp-server-executable-path "~/.emacs.d/.cache/omnisharp-osx-arm64-net6.0/OmniSharp")
    (setenv "FrameworkPathOverride" "/Library/Frameworks/Mono.framework/Versions/6.12.0"))
#+end_src
* Front-End
** tide
#+begin_src emacs-lisp
  (use-package tide
    :ensure t
    :config
    (setq tide-completion-enable-autoimport-suggestions t))

  (defun setup-tide-mode ()
    "Setup tide mode for other mode."
    (interactive)
    ;; (message "setup tide mode ....")
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    ;; (company-mode +1)
    (tide-hl-identifier-mode +1)
    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)
    (define-key tide-mode-map (kbd "s-.") 'tide-references)
    (define-key tide-references-mode-map (kbd "v") 'tide-goto-reference))
#+end_src
** prettier-js
#+begin_src emacs-lisp
  (use-package prettier-js
    :ensure t
    :hook ((rjsx-mode . maybe-use-prettier)
           (web-mode . maybe-use-prettier)
           (typescript-tsx-mode . maybe-use-prettier))
    :config
    (defun maybe-use-prettier ()
      "Enable prettier-js-mode if an rc file is located."
      (if (locate-dominating-file default-directory ".prettierrc")
          (prettier-js-mode +1)))
    )
#+end_src
** add-node-modules-path
#+begin_src emacs-lisp
  (use-package add-node-modules-path
    :ensure t
    :hook ((rjsx-mode . add-node-modules-path)
           (typescript-mode . add-node-modules-path)
           (web-mode . add-node-modules-path)))
#+end_src
** tailwindcss
#+begin_src emacs-lisp
  (use-package lsp-tailwindcss
    :straight (lsp-tailwindcss :type git :host github :repo "merrickluo/lsp-tailwindcss")
    :init
    (setq lsp-tailwindcss-add-on-mode t))
#+end_src
** emment
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :hook (web-mode css-mode scss-mode sgml-mode typescript-tsx-mode rjsx-mode)
    :bind (:map emmet-mode-keymap
                ("<C-return>" . nil)))

#+end_src
** web-mode
#+begin_src emacs-lisp
  (setq-default css-indent-offset 2)

  (use-package web-mode
    :ensure t
    :mode (("\\.vue\\'" . web-mode))
    :hook ((web-mode . yas-minor-mode)
           (web-mode . (lambda ()
                         ;; short circuit js mode and just do everything in jsx-mode
                         ;; (if (equal web-mode-content-type "javascript")
                         ;;     (web-mode-set-content-type "jsx")
                         ;;   (message "now set to: %s" web-mode-content-type))
                         ;; (setq lsp-enable-indentation nil)
                         ;; (when (string-equal "tsx" (file-name-extension buffer-file-name)) (setup-tide-mode))
                         (when (string-equal "vue" (file-name-extension buffer-file-name)) (lsp-deferred)))))
    :custom
    (indent-tabs-mode t)
    (web-mode-enable-comment-annotation nil)
    (web-mode-markup-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-css-indent-offset 2)

    :config
    (setq web-mode-script-padding 0)
    (setq web-mode-style-padding 0)
    (setq web-mode-block-padding 0)
    (setq web-mode-enable-current-column-highlight t))
#+end_src
** rjsx-mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :mode (("\\.jsx?\\'" . rjsx-mode))
    :hook (rjsx-mode . setup-tide-mode)
    :config
    (setq js-indent-level 2)
    (setq-default js2-allow-rhino-new-expr-initializer nil)
    (setq-default js2-auto-indent-p nil)
    (setq-default js2-enter-indents-newline nil)
    (setq-default js2-global-externs '("module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "process" "setImmediate"))
    (setq-default js2-idle-timer-delay 0.1)
    (setq-default js2-indent-on-enter-key nil)
    (setq-default js2-mirror-mode nil)
    (setq-default js2-strict-inconsistent-return-warning nil)
    (setq-default js2-auto-indent-p t)
    (setq-default js2-include-rhino-externs nil)
    (setq-default js2-include-gears-externs nil)
    (setq-default js2-concat-multiline-strings 'eol)
    (setq-default js2-rebind-eol-bol-keys nil)
    ;; Let flycheck handle parse errors
    (setq-default js2-show-parse-errors nil)
    (setq-default js2-strict-missing-semi-warning nil)
    (setq-default js2-strict-trailing-comma-warning nil) ;; jshint does not warn about this now for some reason

    (add-hook 'rjsx-mode-hook
              (lambda()
                (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
                ;; (flycheck-select-checker 'javascript-eslint)
                ))
    )
#+end_src
** typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode (("\\.ts\\'" . typescript-mode)
           ("\\.tsx\\'" . typescript-tsx-mode))
    :hook ((typescript-mode . lsp-deferred))
    :init
    (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
    :config
    (setq typescript-indent-level 2))

  (use-package tree-sitter
    :ensure t
    :hook ((typescript-tsx-mode . tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter
    :config
    (tree-sitter-require 'tsx)
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx)))
#+end_src
** dart
#+begin_src emacs-lisp
  (use-package lsp-dart
    :ensure t
    :defer t
    :hook ((dart-mode . lsp-deferred)
           (dart-mode . smartparens-mode)
           (before-save . my/dart-mode-before-save-hook))
    :preface
    (defun my/dart-mode-before-save-hook ()
      (when (eq major-mode 'dart-mode)
        (lsp-format-buffer)))
    :config
    (setq lsp-dart-flutter-widget-guides nil)
    (setq lsp-dart-dap-flutter-hot-reload-on-save t)
    (with-eval-after-load 'projectile
      (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
      (add-to-list 'projectile-project-root-files-bottom-up "BUILD")))
#+end_src
* Org-Mode
** cal-china-x
#+begin_src emacs-lisp
  ;;农历
  (use-package cal-china-x
    :ensure t
    :config
    (setq mark-holidays-in-calendar t)

    (setq holidays '(
                     ;;公历节日
                     (holiday-fixed 2 14 "情人节")
                     (holiday-fixed 9 10 "教师节")
                     (holiday-float 6 0 3 "父亲节")
                     ;;农历节日
                     (holiday-lunar 1 1 "春节" 0)
                     (holiday-lunar 1 15 "元宵节" 0)
                     (holiday-solar-term "清明" "清明节")
                     (holiday-lunar 5 5 "端午节" 0)
                     (holiday-lunar 7 7 "七夕情人节" 0)
                     (holiday-lunar 8 15 "中秋节" 0)
                     ;;纪念日
                     (holiday-fixed 12 1 "儿子生日")
                     (holiday-fixed 2 18 "老婆生日" 0)
                     (holiday-lunar 11 28 "我的生日" 0)
                     )
          )

    ;;只显示我定制的节假日
    (setq calendar-holidays (append cal-china-x-chinese-holidays holidays))


    (setq org-agenda-format-date 'd/org-agenda-format-date-aligned)
    (defun d/org-agenda-format-date-aligned (date)
      "Format a DATE string for display in the daily/weekly agenda, or timeline.
        This function makes sure that dates are aligned for easy reading."
      (message "format----------------------------date-------------")
      (require 'cal-iso)
      (let* ((dayname (aref cal-china-x-days
                            (calendar-day-of-week date)))
             (day (cadr date))
             (month (car date))
             (year (nth 2 date))
             (cn-date (calendar-chinese-from-absolute (calendar-absolute-from-gregorian date)))
             (cn-month (cl-caddr cn-date))
             (cn-day (cl-cadddr cn-date))
             (cn-month-string (concat (aref cal-china-x-month-name
                                            (1- (floor cn-month)))
                                      (if (integerp cn-month)
                                          ""
                                        "(闰月)")))
             (cn-day-string (aref cal-china-x-day-name
                                  (1- cn-day))))
        (format "%04d-%02d-%02d 星期%s %s%s" year month
                day dayname cn-month-string cn-day-string)))


    )
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
    (setq org-hide-leading-stars t)
    (setq org-bullets-bullet-list '("☯" "✿" "✚" "◉" "❀"))
    (setq org-ellipsis "⤵") ;; ⤵ ↴ ⬎ ⤷
    (set-face-attribute 'org-ellipsis nil :underline nil)
    (setq org-log-done 'time))
#+end_src
** reveal
#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
    )

  (use-package htmlize
    :ensure t)
#+end_src
